// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvoiceStatus {
  PENDING
  SUCCESS
  CANCELLED
}

enum UserStatus {
  VERIFIED
  NOT_VERIFIED
}

enum UserRoles {
  SUPPORT
  ADMIN
  USER
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  password   String
  comments   Comment[]
  cart       Cart?
  invoices   Invoice[]
  items      Item[]
  categories Category[]
  status     UserStatus  @default(NOT_VERIFIED)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  roles      UserRoles[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  item      Item?    @relation(fields: [itemId], references: [id])
  itemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id     Int    @id @default(autoincrement())
  total  Float? @default(0.0)
  items  Item[]
  user   User?  @relation(fields: [userId], references: [id])
  userId Int?   @unique
}

model Invoice {
  id     Int           @id @default(autoincrement())
  user   User?         @relation(fields: [userId], references: [id])
  userId Int
  status InvoiceStatus @default(PENDING)
  price  Float
}

model Item {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  caption    String
  price      Float
  images     ItemImage[]
  cart       Cart?       @relation(fields: [cartId], references: [id])
  cartId     Int?
  user       User?       @relation(fields: [userId], references: [id])
  userId     Int
  category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId Int
  comments   Comment[]
  brand      Brand       @relation(fields: [brandId], references: [id])
  brandId    Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Brand {
  id    Int    @id @default(autoincrement())
  title String
  items Item[]
}

model ItemImage {
  id        Int      @id @default(autoincrement())
  url       String
  item      Item?    @relation(fields: [itemId], references: [id])
  itemId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id     Int    @id @default(autoincrement())
  title  String @unique
  items  Item[]
  user   User?  @relation(fields: [userId], references: [id])
  userId Int
}
